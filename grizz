#!/usr/bin/env python

import grizz
import os
import sys
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler

class Handler(PatternMatchingEventHandler):
    def __init__(self, cwd):
        super(Handler, self).__init__(ignore_patterns='out')
        self.cwd = cwd

    def on_any_event(self, event):
        if os.path.join(self.cwd, 'out') in event.src_path:
            return
        render(os.path.join(self.cwd, 'manifest'))

def monitor(cwd):
    event_handler = Handler(cwd)
    observer = Observer()
    observer.schedule(event_handler, path='', recursive=True)
    observer.start()
    return observer

def post_render():
    """post-render command: copy contents of in/ to out/"""
    os.system("cp -R in/ out")

def render(manifest):
    print 'rendering...'
    if not grizz.render_from_manifest(manifest):
        return 1
    post_render()

def main():
    PREVIEW_CMD = "preview"
    RENDER_CMD = "render"
    cmds = {"preview": PREVIEW_CMD, "render": RENDER_CMD, "test": PREVIEW_CMD}
    if len(sys.argv) < 2 or sys.argv[1] not in cmds:
        print 'USAGE: %s (%s|%s)' % (sys.argv[0], RENDER_CMD, PREVIEW_CMD)
        sys.exit(1)
    cmd = cmds[sys.argv[1]]
    cwd = os.getcwd()
    if cmd == RENDER_CMD or cmd == PREVIEW_CMD:
        render(os.path.join(cwd, 'manifest'))
    if cmd == PREVIEW_CMD:
        observer = monitor(cwd)
        grizz.serve('./out/')
        observer.stop()
        observer.join()

if __name__ == '__main__':
    main()
